{"remainingRequest":"C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\src\\views\\product\\ProductListDetails.vue?vue&type=template&id=6664c0a2&","dependencies":[{"path":"C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\src\\views\\product\\ProductListDetails.vue","mtime":1616405030800},{"path":"C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}