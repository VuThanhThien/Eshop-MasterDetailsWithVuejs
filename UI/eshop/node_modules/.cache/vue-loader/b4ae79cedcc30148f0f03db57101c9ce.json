{"remainingRequest":"C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\src\\views\\product\\ProductListDetails.vue?vue&type=template&id=6664c0a2&","dependencies":[{"path":"C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\src\\views\\product\\ProductListDetails.vue","mtime":1616668726514},{"path":"C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Admin\\Desktop\\VTT-eShop-18-03-21\\UI\\eshop\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybUJvZHkiLCBjbGFzczogeyBpc0hpZGU6IF92bS5pc0hpZGUgfSB9LCBbCiAgICBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogIm15QnV0dG9uRGlhbG9nIiwKICAgICAgICBzdGF0aWNTdHlsZTogeyAiYm9yZGVyLWJvdHRvbSI6ICJzb2xpZCAxcHggZ3JheSIgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJzaG9ydGtleSIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG9ydGtleSIsCiAgICAgICAgICAgICAgICB2YWx1ZTogWyJjdHJsIiwgInMiXSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJbJ2N0cmwnLCAncyddIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJteUJ1dHRvbiIsCiAgICAgICAgICAgIGF0dHJzOiB7IHRpdGxlOiAiQ3RybCArIFMiLCBpZDogImJ1dHRvblNhdmUiIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCkKICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2F2ZSgkZXZlbnQpCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBzaG9ydGtleTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnNhdmUoKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb25TYXZlIiB9KSwgX3ZtLl92KCIgTMawdSAiKV0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAic2hvcnRrZXkiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvcnRrZXkiLAogICAgICAgICAgICAgICAgdmFsdWU6IFsiY3RybCIsICJjIl0sCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiWydjdHJsJywgJ2MnXSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXlCdXR0b24iLAogICAgICAgICAgICBhdHRyczogeyB0aXRsZTogIkN0cmwgKyBDIiwgaWQ6ICJidXR0b25DYW5jZWwiIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xpY2s6IF92bS5jYW5jZWwsCiAgICAgICAgICAgICAgc2hvcnRrZXk6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jYW5jZWwoKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb25DYW5jZWwiIH0pLCBfdm0uX3YoIiBI4buneSBi4buPICIpXQogICAgICAgICkKICAgICAgXQogICAgKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYm9keURpYWxvZyIgfSwgWwogICAgICBfYygiaDMiLCBbX3ZtLl92KCJUSMOUTkcgVElOIEPGoCBC4bqiTiIpXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93Rm9ybSIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFiZWxGb3JtIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIlRy4bqhbmcgdGjDoWkga2luaCBkb2FuaCIpCiAgICAgICAgXSksCiAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgdmFsdWU6IF92bS5wcm9kdWN0LnN0YXR1cywKICAgICAgICAgICAgICBleHByZXNzaW9uOiAicHJvZHVjdC5zdGF0dXMiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICBhdHRyczogeyB0eXBlOiAicmFkaW8iLCBuYW1lOiAicmFkaW9jaGVjayIsIHZhbHVlOiAiMSIgfSwKICAgICAgICAgIGRvbVByb3BzOiB7IGNoZWNrZWQ6IF92bS5fcShfdm0ucHJvZHVjdC5zdGF0dXMsICIxIikgfSwKICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF92bS4kc2V0KF92bS5wcm9kdWN0LCAic3RhdHVzIiwgIjEiKQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSksCiAgICAgICAgX2MoCiAgICAgICAgICAibGFiZWwiLAogICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXJpZ2h0IjogIjEwcHgiIH0sIGF0dHJzOiB7IGZvcjogIjEiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIsSQYW5nIGtpbmggZG9hbmgiKV0KICAgICAgICApLAogICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgIHZhbHVlOiBfdm0ucHJvZHVjdC5zdGF0dXMsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInByb2R1Y3Quc3RhdHVzIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgYXR0cnM6IHsgdHlwZTogInJhZGlvIiwgbmFtZTogInJhZGlvY2hlY2siLCB2YWx1ZTogIjAiIH0sCiAgICAgICAgICBkb21Qcm9wczogeyBjaGVja2VkOiBfdm0uX3EoX3ZtLnByb2R1Y3Quc3RhdHVzLCAiMCIpIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIHJldHVybiBfdm0uJHNldChfdm0ucHJvZHVjdCwgInN0YXR1cyIsICIwIikKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pLAogICAgICAgIF9jKCJsYWJlbCIsIHsgYXR0cnM6IHsgZm9yOiAiMiIgfSB9LCBbX3ZtLl92KCJOZ+G7q25nIGtpbmggZG9hbmgiKV0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvd0Zvcm0iIH0sIFsKICAgICAgICBfdm0uX20oMCksCiAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgdmFsdWU6IF92bS5wcm9kdWN0LnByb2R1Y3ROYW1lLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwcm9kdWN0LnByb2R1Y3ROYW1lIgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgcmVmOiAibmFtZSIsCiAgICAgICAgICBzdGF0aWNDbGFzczogInByb2R1Y3ROYW1lIiwKICAgICAgICAgIGNsYXNzOiB7IGJvcmRlcnM6IF92bS52YWxpZGF0ZVByb2R1Y3QuZXJyb3IgfSwKICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiB9LAogICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5wcm9kdWN0LnByb2R1Y3ROYW1lIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBpbnB1dDogWwogICAgICAgICAgICAgIGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnByb2R1Y3QsICJwcm9kdWN0TmFtZSIsICRldmVudC50YXJnZXQudmFsdWUpCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBfdm0uYXV0b1NrdQogICAgICAgICAgICBdCiAgICAgICAgICB9CiAgICAgICAgfSksCiAgICAgICAgX3ZtLnZhbGlkYXRlUHJvZHVjdC5lcnJvcgogICAgICAgICAgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltZ1ZhbGlkYXRlIiB9KQogICAgICAgICAgOiBfdm0uX2UoKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3dGb3JtIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbEZvcm0iIH0sIFtfdm0uX3YoIk5ow7NtIGjDoG5nIGjDs2EiKV0pLAogICAgICAgIF9jKAogICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5wcm9kdWN0LmNhdGVnb3J5Q29kZSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwcm9kdWN0LmNhdGVnb3J5Q29kZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY3VzdG9tLXNlbGVjdCIsCiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMjcwcHgiIH0sCiAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAic2VsZWN0Q2F0ZWdvcnkiIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcgogICAgICAgICAgICAgICAgICAuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsIGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF92bS4kc2V0KAogICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdCwKICAgICAgICAgICAgICAgICAgImNhdGVnb3J5Q29kZSIsCiAgICAgICAgICAgICAgICAgICRldmVudC50YXJnZXQubXVsdGlwbGUgPyAkJHNlbGVjdGVkVmFsIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgc2VsZWN0ZWQ6ICIiLCBkaXNhYmxlZDogIiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaOG7jW4gbmjDs20gaMOgbmcgaMOzYSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX2woX3ZtLmNhdGVnb3JpZXMsIGZ1bmN0aW9uKGNhdGVnb3J5KSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgIm9wdGlvbiIsCiAgICAgICAgICAgICAgICB7IGtleTogY2F0ZWdvcnkuaWQsIGRvbVByb3BzOiB7IHZhbHVlOiBjYXRlZ29yeS5pZCB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhjYXRlZ29yeS5uYW1lKSArICIgIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9KQogICAgICAgICAgXSwKICAgICAgICAgIDIKICAgICAgICApLAogICAgICAgIF92bS5fbSgxKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3dGb3JtIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbEZvcm0iIH0sIFtfdm0uX3YoIk3DoyBTS1UiKV0pLAogICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgIHZhbHVlOiBfdm0ucHJvZHVjdC5za3UsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInByb2R1Y3Quc2t1IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiIH0sCiAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnByb2R1Y3Quc2t1IH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnByb2R1Y3QsICJza3UiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJyb3dGb3JtIiB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgIF9jKCJEeE51bWJlckJveCIsIHsKICAgICAgICAgICAgYXR0cnM6IHsgZm9ybWF0OiAiIywjIzAiIH0sCiAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgdmFsdWU6IF92bS5wcm9kdWN0LmJ1eVByaWNlLAogICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5wcm9kdWN0LCAiYnV5UHJpY2UiLCAkJHYpCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAicHJvZHVjdC5idXlQcmljZSIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogInJvd0Zvcm0iIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbEZvcm0iIH0sIFtfdm0uX3YoIkdpw6EgYsOhbiIpXSksCiAgICAgICAgICBfYygiRHhOdW1iZXJCb3giLCB7CiAgICAgICAgICAgIGF0dHJzOiB7IGZvcm1hdDogIiMsIyMwIiB9LAogICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgIHZhbHVlOiBfdm0ucHJvZHVjdC5zZWxsUHJpY2UsCiAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnByb2R1Y3QsICJzZWxsUHJpY2UiLCAkJHYpCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAicHJvZHVjdC5zZWxsUHJpY2UiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93Rm9ybSIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFiZWxGb3JtIiB9LCBbX3ZtLl92KCLEkMahbiB24buLIildKSwKICAgICAgICBfYygKICAgICAgICAgICJzZWxlY3QiLAogICAgICAgICAgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucHJvZHVjdC51bml0Q29kZSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwcm9kdWN0LnVuaXRDb2RlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjdXN0b20tc2VsZWN0IiwKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIyNzBweCIgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgdmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyCiAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBvLnNlbGVjdGVkCiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSAiX3ZhbHVlIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgX3ZtLiRzZXQoCiAgICAgICAgICAgICAgICAgIF92bS5wcm9kdWN0LAogICAgICAgICAgICAgICAgICAidW5pdENvZGUiLAogICAgICAgICAgICAgICAgICAkZXZlbnQudGFyZ2V0Lm11bHRpcGxlID8gJCRzZWxlY3RlZFZhbCA6ICQkc2VsZWN0ZWRWYWxbMF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJvcHRpb24iLCB7IGF0dHJzOiB7IHNlbGVjdGVkOiAiIiwgZGlzYWJsZWQ6ICIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiQ2jhu41uIMSRxqFuIHbhu4siKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl9sKF92bS51bml0cywgZnVuY3Rpb24odW5pdCkgewogICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICJvcHRpb24iLAogICAgICAgICAgICAgICAgeyBrZXk6IHVuaXQuaWQsIGRvbVByb3BzOiB7IHZhbHVlOiB1bml0LmlkIH0gfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIiAiICsgX3ZtLl9zKHVuaXQubmFtZSkgKyAiICIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfSkKICAgICAgICAgIF0sCiAgICAgICAgICAyCiAgICAgICAgKSwKICAgICAgICBfdm0uX20oMykKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJyb3dGb3JtIiwgc3RhdGljU3R5bGU6IHsgImFsaWduLWl0ZW1zIjogImNlbnRlciIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucHJvZHVjdC5pc1Nob3csCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwcm9kdWN0LmlzU2hvdyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJjaGVja2JveCIgfSwKICAgICAgICAgICAgICBkb21Qcm9wczogewogICAgICAgICAgICAgICAgY2hlY2tlZDogQXJyYXkuaXNBcnJheShfdm0ucHJvZHVjdC5pc1Nob3cpCiAgICAgICAgICAgICAgICAgID8gX3ZtLl9pKF92bS5wcm9kdWN0LmlzU2hvdywgbnVsbCkgPiAtMQogICAgICAgICAgICAgICAgICA6IF92bS5wcm9kdWN0LmlzU2hvdwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIHZhciAkJGEgPSBfdm0ucHJvZHVjdC5pc1Nob3csCiAgICAgICAgICAgICAgICAgICAgJCRlbCA9ICRldmVudC50YXJnZXQsCiAgICAgICAgICAgICAgICAgICAgJCRjID0gJCRlbC5jaGVja2VkID8gdHJ1ZSA6IGZhbHNlCiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KCQkYSkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgJCR2ID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICQkaSA9IF92bS5faSgkJGEsICQkdikKICAgICAgICAgICAgICAgICAgICBpZiAoJCRlbC5jaGVja2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAkJGkgPCAwICYmCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5wcm9kdWN0LCAiaXNTaG93IiwgJCRhLmNvbmNhdChbJCR2XSkpCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICQkaSA+IC0xICYmCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KAogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wcm9kdWN0LAogICAgICAgICAgICAgICAgICAgICAgICAgICJpc1Nob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICQkYS5zbGljZSgwLCAkJGkpLmNvbmNhdCgkJGEuc2xpY2UoJCRpICsgMSkpCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnByb2R1Y3QsICJpc1Nob3ciLCAkJGMpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiBIaeG7g24gdGjhu4sgdHLDqm4gbcOgbiBow6xuaCBiw6FuIGjDoG5nICIpLAogICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtcXVlc3Rpb24tY2lyY2xlIiB9KQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIlRIw5RORyBUSU4gVEhV4buYQyBUw41OSCIpXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93Rm9ybSIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFiZWxGb3JtIiB9LCBbX3ZtLl92KCJUaHXhu5ljIHTDrW5oIildKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyBkaXNwbGF5OiAiZmxleCIgfSB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbG9yTmFtZSIgfSwgW192bS5fdigiTcOgdSBz4bqvYyIpXSksCiAgICAgICAgICAgIF9jKCJpbnB1dC10YWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsgImFkZC10YWctb24tYmx1ciI6IHRydWUgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5pbnB1dENvbG9yT25SZW1vdmUoJGV2ZW50KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGFkZDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uaW5wdXRDb2xvck9uQWRkKCRldmVudCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmNvbG9ycywKICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgX3ZtLmNvbG9ycyA9ICQkdgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJjb2xvcnMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uY2hpbGRyZW4ubGVuZ3RoID4gMAogICAgICAgID8gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3dGb3JtIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFiZWxGb3JtIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDaGkgdGnhur90IHRodeG7mWMgdMOtbmgiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncmlkRGV0YWlsIiB9LCBbCiAgICAgICAgICAgICAgX2MoInRhYmxlIiwgeyBhdHRyczogeyB3aWR0aDogIjEwMCUiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl9tKDQpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJ0Ym9keSIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJkZXRhaWxCb2R5VGFibGUiIH0sCiAgICAgICAgICAgICAgICAgIF92bS5fbChfdm0uY2hpbGRyZW4sIGZ1bmN0aW9uKHRhZywgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoInRyIiwgeyBrZXk6IGluZGV4IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjZWxsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTUwcHgiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGFnLnByb2R1Y3ROYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInRhZy5wcm9kdWN0TmFtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogdGFnLnByb2R1Y3ROYW1lIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInByb2R1Y3ROYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNlbGwiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGFnLnNrdSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidGFnLnNrdSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMTAwcHgiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiB0YWcuc2t1IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQodGFnLCAic2t1IiwgJGV2ZW50LnRhcmdldC52YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNlbGwiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoIkR4TnVtYmVyQm94IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBmb3JtYXQ6ICIjIzAiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRhZy5iYXJDb2RlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KHRhZywgImJhckNvZGUiLCAkJHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidGFnLmJhckNvZGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY2VsbCIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiRHhOdW1iZXJCb3giLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGZvcm1hdDogIiMsIyMwIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0YWcuYnV5UHJpY2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQodGFnLCAiYnV5UHJpY2UiLCAkJHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidGFnLmJ1eVByaWNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNlbGwiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoIkR4TnVtYmVyQm94IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBmb3JtYXQ6ICIjLCMjMCIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGFnLnNlbGxQcmljZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldCh0YWcsICJzZWxsUHJpY2UiLCAkJHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidGFnLnNlbGxQcmljZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIDogX3ZtLl9lKCksCiAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIlRIw5RORyBUSU4gQuG7lCBTVU5HIildKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3dGb3JtIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbEZvcm0iIH0sIFtfdm0uX3YoIk3DtCB04bqjIildKSwKICAgICAgICBfYygidGV4dGFyZWEiLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnByb2R1Y3QuZGVzY3JpcHRpb24sCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInByb2R1Y3QuZGVzY3JpcHRpb24iCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICBzdGF0aWNDbGFzczogImRlc2NyaXB0aW9uIiwKICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ucHJvZHVjdC5kZXNjcmlwdGlvbiB9LAogICAgICAgICAgb246IHsKICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF92bS4kc2V0KF92bS5wcm9kdWN0LCAiZGVzY3JpcHRpb24iLCAkZXZlbnQudGFyZ2V0LnZhbHVlKQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93Rm9ybSIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFiZWxGb3JtIiB9LCBbX3ZtLl92KCLhuqJuaCBow6BuZyBow7NhIildKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJveEltYWdlIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltZ0Jsb2NrIiB9LCBbCiAgICAgICAgICAgICFfdm0udXJsCiAgICAgICAgICAgICAgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInN5bWJvbFBlbiIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb25QZW4iIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBCaeG7g3UgdMaw4bujbmcgIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgIV92bS51cmwgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltZ1Byb2R1Y3QiIH0pIDogX3ZtLl9lKCksCiAgICAgICAgICAgIF92bS51cmwKICAgICAgICAgICAgICA/IF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nUHJvZHVjdCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLnVybCB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ4Ym94SW5uZXIiIH0sIFsKICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW5wdXRmaWxlIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdHlwZTogImZpbGUiLAogICAgICAgICAgICAgICAgbmFtZTogImZpbGUiLAogICAgICAgICAgICAgICAgaWQ6ICJmaWxlIiwKICAgICAgICAgICAgICAgIGFjY2VwdDogImltYWdlL3gtcG5nLGltYWdlL2dpZixpbWFnZS9qcGVnIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgb246IHsgY2hhbmdlOiBfdm0ub25GaWxlQ2hhbmdlIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJsYWJlbCIsIHsgYXR0cnM6IHsgZm9yOiAiZmlsZSIgfSB9LCBbX3ZtLl92KCIuLi4iKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fbSg1KQogICAgICBdKQogICAgXSksCiAgICBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogIm15QnV0dG9uRGlhbG9nIiwKICAgICAgICBzdGF0aWNTdHlsZTogeyAiYm9yZGVyLXRvcCI6ICJzb2xpZCAxcHggZ3JheSIgfSwKICAgICAgICBhdHRyczogeyBpZDogImJ1dHRvbkJvdHRvbSIgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJzaG9ydGtleSIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG9ydGtleSIsCiAgICAgICAgICAgICAgICB2YWx1ZTogWyJjdHJsIiwgInMiXSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJbJ2N0cmwnLCAncyddIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJteUJ1dHRvbiIsCiAgICAgICAgICAgIGF0dHJzOiB7IHRpdGxlOiAiQ3RybCArIFMiLCBpZDogImJ1dHRvblNhdmUiIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCkKICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2F2ZSgkZXZlbnQpCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBzaG9ydGtleTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnNhdmUoKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb25TYXZlIiB9KSwgX3ZtLl92KCIgTMawdSAiKV0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAic2hvcnRrZXkiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvcnRrZXkiLAogICAgICAgICAgICAgICAgdmFsdWU6IFsiY3RybCIsICJjIl0sCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiWydjdHJsJywgJ2MnXSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXlCdXR0b24iLAogICAgICAgICAgICBhdHRyczogeyB0aXRsZTogIkN0cmwgKyBDIiwgaWQ6ICJidXR0b25DYW5jZWwiIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xpY2s6IF92bS5jYW5jZWwsCiAgICAgICAgICAgICAgc2hvcnRrZXk6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jYW5jZWwoKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb25DYW5jZWwiIH0pLCBfdm0uX3YoIiBI4buneSBi4buPICIpXQogICAgICAgICkKICAgICAgXQogICAgKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFiZWxGb3JtIiB9LCBbCiAgICAgIF92bS5fdigiIFTDqm4gaMOgbmcgaMOzYSIpLAogICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICJyZWQiIH0gfSwgW192bS5fdigiICoiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb25QbHVzQ29udGFpbiIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb25QbHVzIiB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYWJlbEZvcm0iIH0sIFsKICAgICAgX3ZtLl92KCIgR2nDoSBtdWEgIiksCiAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1xdWVzdGlvbi1jaXJjbGUiIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb25QbHVzQ29udGFpbiIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImljb25QbHVzIiB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRoZWFkIiwgeyBhdHRyczogeyB3aWR0aDogIjEwMCUiIH0gfSwgWwogICAgICBfYygidHIiLCB7IHN0YXRpY0NsYXNzOiAiZGV0YWlsVGFibGUiIH0sIFsKICAgICAgICBfYygidGgiLCB7IGF0dHJzOiB7IHdpZHRoOiAiNTAlIiB9IH0sIFtfdm0uX3YoIlTDqm4gaMOgbmcgaMOzYSIpXSksCiAgICAgICAgX2MoInRoIiwgeyBhdHRyczogeyB3aWR0aDogIjklIiB9IH0sIFtfdm0uX3YoIk3DoyBTS1UiKV0pLAogICAgICAgIF9jKCJ0aCIsIHsgYXR0cnM6IHsgd2lkdGg6ICI5JSIgfSB9LCBbX3ZtLl92KCJNw6MgduG6oWNoIildKSwKICAgICAgICBfYygidGgiLCB7IGF0dHJzOiB7IHdpZHRoOiAiOSUiIH0gfSwgW192bS5fdigiR2nDoSBtdWEiKV0pLAogICAgICAgIF9jKCJ0aCIsIHsgYXR0cnM6IHsgd2lkdGg6ICI5JSIgfSB9LCBbX3ZtLl92KCJHacOhIGLDoW4iKV0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNTdHlsZTogeyBwYWRkaW5nOiAiMjBweCIgfSB9LCBbCiAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgIF92bS5fdigiLSBM4buxYSBjaOG7jW4gYmnhu4N1IHTGsOG7o25nIMSR4buDIHRoYXkgdGjhur8gbuG6v3Uga2jDtG5nIGPDsyDhuqNuaCIpCiAgICAgIF0pLAogICAgICBfYygiYnIiKSwKICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi0gxJDhu4tuaCBk4bqhbmcg4bqjbmgoanBnLCBqcGVnLCBwbmcsIGdpZikgdsOgIGR1bmcgbMaw4bujbmcgbmjhu48gaMahbiA1TUIgIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}